\section{Algoritmo sin(x)}
\label{Apendice1:XXX}

\begin{center}
\begin{footnotesize}
\begin{verbatim}
###################################################################################
# seno.py
###################################################################################
##!/usr/bin/python
#!encoding: UTF-8
from math import pi
from math import sin
#definimos una función, con la que obtendremos el valor de los diferentes nodos
empleados, en nuestro caso la funcion es el seno(x)def seno(x):
  f=sin(x)
  return f
  
if __name__=="__main__":#Prueba para la funcion seno(x)
  n=int(raw_input("Introduzca un punto de prueba: "))
  print "El seno de dicha función es: %.3f" %seno(n)
  
# AUTORES:Zoilo González Garcia y Francisco Javier Reyes Sánchez
#  
# DESCRIPCION: El codigo presentado anteriormente, nos permite calcular el valor de
la función seno(x),en los diferentes puntos, o nodos, que utilizaremos para el calculo
del polinomio interpolador de Newton.
#
###################################################################################
\end{verbatim}
\end{footnotesize}
\end{center}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Algoritmo Diferencias Divididas}
\label{Apendice2:YYY}

\begin{center}
\begin{footnotesize}
\begin{verbatim}
###################################################################################
# difdiv.py
###################################################################################
#!/usr/bin/python
#!encoding: UTF-8
from math import pi
from math import sin
import seno
def difdiv(x):
  c=[]#lista que guardará cada una de las diferencias divididas.
  c=c+[0]#ya que la primera diferencia dividida es cero (f(0))
  c1=(seno.seno(x[1])-seno.seno(x[0]))/(x[1]-x[0])
  c=c+[c1]
  c12=(seno.seno(x[2])-seno.seno(x[1]))/(x[2]-x[1])#diferencia dividida entre x1 y x2
  c2=(c12-c1)/(x[2]-x[0])
  c=c+[c2]
  c23=((seno.seno(x[3])-seno.seno(x[1]))/(x[3]-x[2]))
  c13=((c23-c12)/(x[3]-x[1]))
  c3=((c13-c2)/(x[3]-x[0]))
  c=c+[c3]
  return c
  
if __name__=="__main__":#Prueba para la funcion difdiv(x)
  x=(0, pi/6, pi/3, pi/2)
  print difdiv(x)
 ###################################################################################
 #
 # AUTORES:Zoilo González Garcia y Francisco Javier Reyes Sánchez
 #
 # DESCRIPCION:El segundo código mostrado, ha sido creado con la intención de calcular las 
 diferencias divididas de Newton, que utilizaremos para hallar el polinomio interpolador.
 Para ello importaremos los valores obtenidos en el primer código.
 #
 ##################################################################################
\end{verbatim}
\end{footnotesize}
\end{center}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
\section{Algoritmo Interpolador de Newton}
\label{Apendice3:ZZZ}

\begin{center}
\begin{footnotesize}
\begin{verbatim}
###################################################################################
# interpoladornewton.py
###################################################################################
#!/usr/bin/python
#!encoding: UTF-8
from math import pi
from math import sin
import difdiv
l=[]
s=[]
n=(0, pi/6, pi/3, pi/2)#tomamos cuatro nodos equidistantes en el intervalo (0,pi/2)
l=difdiv.difdiv(n)
print "El polinomio interpolador de Newton en el intervalo (0, pi/2), para los puntos
\nx0=0\nx1=pi/6\nx2=pi/3\nx3=pi/2\nes: "
print "P(x)= (%f) + (%f)*(x-%f) + (%f)*(x-%f)(x-%f) + (%f)*(x-%f)(x-%f)(x-%f)" %(l[0],
l[1], n[0], l[2], n[0], n[1], l[3], n[0], n[1], n[2])

# AUTORES:Zoilo González Garcia y Francisco Javier Reyes Sánchez
#  
# DESCRIPCION: Este tercer código nos ayuda a mostar por pantalla el polinomio que buscamos,
para ello importamos la función anterior que nos calculaba las diferencias divididas de Newton.
#
###################################################################################
\end{verbatim}
\end{footnotesize}
\end{center}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Algoritmo para comprobacion}
\label{Apendice4:WWW}

\begin{center}
\begin{footnotesize}
\begin{verbatim}
###################################################################################
# comprobacion.py
###################################################################################
#!/usr/bin/python
#!encoding: UTF-8
from math import pi
from math import sin
import seno
valores=(pi/4, pi/5, pi/6,2*pi/5)
for i in valores:
  print "El valor aproximado por el polinomio para x=%f es" %i
  y=(0.311104)*(i**3)+(-0.733021)*(i**2)+(1.253448)*i
  print "y=%f" %y
  print "El seno de %f es" %i
  f=seno.seno(i)
  print "sen(x)=%f" %f
  print "\n"


# AUTORES:Zoilo González Garcia y Francisco Javier Reyes Sánchez
#  
# DESCRIPCION: Este código nos permite valorar el polinomio obtenido en el código
anterior. Para ello damos diferentes valores a la variable "x", y observamos el valor de 
las aproximaciones realizadas.
#
###################################################################################
\end{verbatim}
\end{footnotesize}
\end{center}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
\section{Algoritmo de representción en Matplotlib}
\label{Apendice5:KKK}

\begin{center}
\begin{footnotesize}
\begin{verbatim}
#########################################################
####representacionseno.py
#########################################################
#! encoding: utf8

import matplotlib.pylab as pl
import numpy as np

pl.figure(figsize=(8,6), dpi=80)

pl.subplot(1,1,1)

X = np.linspace(-np.pi*2, np.pi*2, 256, endpoint=True)
S = np.sin(X)
E = X*0
Y = np.linspace(0, np.pi/2, 150, endpoint=True)
A = ((0.311104)*(Y**3)+(-0.733021)*(Y**2)+(1.253448)*Y)

pl.plot(X,S, color="red", linewidth=2.5, linestyle="-", label="seno")
pl.plot(Y,A, color="green", label="Aproximacion")
pl.plot(X,E, color="black", linewidth=1, linestyle="--")

pl.legend(loc='0')

pl.xlim(X.min()*1.02,X.max()*1.02)
pl.xticks([-2*np.pi,-3*np.pi/2,-np.pi, -np.pi/2, 0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi],
           [r'$-2\pi$',r'$-3\pi/2$',r'$-\pi$',r'$-\frac{\pi}{2}$',r'$0$',r'$+\pi/2$',r'$+\pi$', r'$+3\pi/2$',r'$+2\pi$']
          )

pl.ylim(-1.1,1.1)
pl.yticks([-1, 0, +1],
          [r'$-1$', r'$0$', r'$+1$']
         )

pl.title("Representacion grafica")

pl.savefig("representacionseno.eps", dpi=72)

pl.show()

# AUTORES:Zoilo González Garcia y Francisco Javier Reyes Sánchez
#  
# DESCRIPCION: En este caso, lo que se hace es representar gráficamente la función seno y el polinomio aproximador de la función en el intervalo correspondiente.
#
###################################################################################
\end{verbatim}
\end{footnotesize}
\end{center}
